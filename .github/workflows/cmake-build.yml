name: CMake Build Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TESTS: true
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  CONAN_PRESET: conan-release

permissions:
  actions: read
  deployments: write
  contents: write
  id-token: write
  security-events: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ windows-latest ]
        # os: [ ubuntu-latest, windows-latest, macos-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]

        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

          # - os: ubuntu-latest
          #   c_compiler: gcc
          #   cpp_compiler: g++

          # - os: macos-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++

        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang

          # - os: ubuntu-latest
          #   c_compiler: cl
          # - os: ubuntu-latest
          #   c_compiler: clang

          # - os: macos-latest
          #   c_compiler: cl
          # - os: macos-latest
          #   c_compiler: gcc

    steps:
      - name: Checkout & Init Submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Get CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest
          ninjaVersion: latest

      - name: Get Conan
        uses: turtlebrowser/get-conan@main

      - name: (Windows) Install Dependencies
        if: matrix.os == 'windows-latest'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64

      - name: (Ubuntu) Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y

      - name: Detect Conan Profile
        working-directory: ${{github.workspace}}
        run: conan profile detect --force

      - name: (Windows) Get Packages from Conan
        if: matrix.os == 'windows-latest'
        working-directory: ${{github.workspace}}
        run: conan install . --build=missing -s build_type=Release -s compiler.cppstd=23

      - name: (Ubuntu) Get Packages from Conan
        if: matrix.os == 'ubuntu-latest'
        working-directory: ${{github.workspace}}
        run: conan install . --build=missing -s build_type=Release -s compiler=gcc -s compiler.libcxx=libstdc++11 -s compiler.cppstd=gnu23 -s compiler.version=13.2 -c tools.system.package_manager:mode=install

      - name: (MacOS) Get Packages from Conan
        if: matrix.os == 'macos-latest'
        working-directory: ${{github.workspace}}
        run: conan install . --build=missing -s build_type=Release -s compiler=clang -s compiler.libcxx=libc++ -s compiler.cppstd=gnu23 -s compiler.version=16

      - name: Configure CMake
        run: cmake --preset ${{env.CONAN_PRESET}}

      - name: Build Project
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --preset ${{env.CONAN_PRESET}}

      - name: Run Tests
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Run Benchmark
        working-directory: ${{ steps.strings.outputs.build-output-dir }}/Release/bin
        run: ./ApplicationBenchmark.exe